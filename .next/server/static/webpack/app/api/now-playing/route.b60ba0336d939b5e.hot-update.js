"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/api/now-playing/route",{

/***/ "(rsc)/./app/api/now-playing/route.ts":
/*!**************************************!*\
  !*** ./app/api/now-playing/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   dynamic: () => (/* binding */ dynamic),\n/* harmony export */   revalidate: () => (/* binding */ revalidate),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\nconst runtime = \"edge\";\nconst dynamic = \"force-dynamic\"; // always fetch fresh\nconst revalidate = 0;\n// CHECK HERE FOR CLOUDFARE ERRORS\nconst clientId = process.env.SPOTIFY_CLIENT_ID;\nconst clientSecret = process.env.SPOTIFY_CLIENT_SECRET;\nconst refreshToken = process.env.SPOTIFY_REFRESH_TOKEN;\nasync function getAccessToken() {\n    const params = new URLSearchParams({\n        grant_type: \"refresh_token\",\n        refresh_token: refreshToken\n    });\n    const res = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": \"Basic \" + btoa(`${clientId}:${clientSecret}`),\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body: params.toString()\n    });\n    if (!res.ok) throw new Error(\"token refresh failed\");\n    return res.json();\n}\nasync function GET() {\n    try {\n        const { access_token } = await getAccessToken();\n        const playingRes = await fetch(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n            headers: {\n                Authorization: `Bearer ${access_token}`\n            }\n        });\n        if (playingRes.status === 204 || playingRes.status === 202) {\n            // nothing is playing\n            return new Response(JSON.stringify({\n                playing: false\n            }), {\n                headers: {\n                    \"content-type\": \"application/json\"\n                }\n            });\n        }\n        if (!playingRes.ok) throw new Error(\"spotify now playing failed\");\n        const data = await playingRes.json();\n        const payload = {\n            playing: data?.is_playing ?? false,\n            progress_ms: data?.progress_ms ?? 0,\n            duration_ms: data?.item?.duration_ms ?? 0,\n            title: data?.item?.name ?? \"\",\n            artist: data?.item?.artists?.map((a)=>a.name).join(\", \") ?? \"\",\n            album: data?.item?.album?.name ?? \"\",\n            artwork: data?.item?.album?.images?.[1]?.url ?? \"\",\n            url: data?.item?.external_urls?.spotify ?? \"\"\n        };\n        return new Response(JSON.stringify(payload), {\n            headers: {\n                \"content-type\": \"application/json\",\n                // prevent caching\n                \"cache-control\": \"no-store, no-cache, must-revalidate\"\n            }\n        });\n    } catch (e) {\n        return new Response(JSON.stringify({\n            playing: false\n        }), {\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            status: 200\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL25vdy1wbGF5aW5nL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTyxNQUFNQSxVQUFVLE9BQU87QUFDdkIsTUFBTUMsVUFBVSxnQkFBZ0IsQ0FBRSxxQkFBcUI7QUFDdkQsTUFBTUMsYUFBYSxFQUFFO0FBRTVCLGtDQUFrQztBQUNsQyxNQUFNQyxXQUFXQyxRQUFRQyxHQUFHLENBQUNDLGlCQUFpQjtBQUM5QyxNQUFNQyxlQUFlSCxRQUFRQyxHQUFHLENBQUNHLHFCQUFxQjtBQUN0RCxNQUFNQyxlQUFlTCxRQUFRQyxHQUFHLENBQUNLLHFCQUFxQjtBQUV0RCxlQUFlQztJQUNiLE1BQU1DLFNBQVMsSUFBSUMsZ0JBQWdCO1FBQ2pDQyxZQUFZO1FBQ1pDLGVBQWVOO0lBQ2pCO0lBRUEsTUFBTU8sTUFBTSxNQUFNQyxNQUFNLDBDQUEwQztRQUNoRUMsUUFBUTtRQUNSQyxTQUFTO1lBQ1AsaUJBQWlCLFdBQVdDLEtBQUssQ0FBQyxFQUFFakIsU0FBUyxDQUFDLEVBQUVJLGFBQWEsQ0FBQztZQUM5RCxnQkFBZ0I7UUFDbEI7UUFDQWMsTUFBTVQsT0FBT1UsUUFBUTtJQUN2QjtJQUVBLElBQUksQ0FBQ04sSUFBSU8sRUFBRSxFQUFFLE1BQU0sSUFBSUMsTUFBTTtJQUM3QixPQUFPUixJQUFJUyxJQUFJO0FBQ2pCO0FBRU8sZUFBZUM7SUFDcEIsSUFBSTtRQUNGLE1BQU0sRUFBRUMsWUFBWSxFQUFFLEdBQUcsTUFBTWhCO1FBRS9CLE1BQU1pQixhQUFhLE1BQU1YLE1BQ3ZCLDBEQUNBO1lBQUVFLFNBQVM7Z0JBQUVVLGVBQWUsQ0FBQyxPQUFPLEVBQUVGLGFBQWEsQ0FBQztZQUFDO1FBQUU7UUFHekQsSUFBSUMsV0FBV0UsTUFBTSxLQUFLLE9BQU9GLFdBQVdFLE1BQU0sS0FBSyxLQUFLO1lBQzFELHFCQUFxQjtZQUNyQixPQUFPLElBQUlDLFNBQVNDLEtBQUtDLFNBQVMsQ0FBQztnQkFBRUMsU0FBUztZQUFNLElBQUk7Z0JBQ3REZixTQUFTO29CQUFFLGdCQUFnQjtnQkFBbUI7WUFDaEQ7UUFDRjtRQUVBLElBQUksQ0FBQ1MsV0FBV0wsRUFBRSxFQUFFLE1BQU0sSUFBSUMsTUFBTTtRQUVwQyxNQUFNVyxPQUFPLE1BQU1QLFdBQVdILElBQUk7UUFFbEMsTUFBTVcsVUFBVTtZQUNkRixTQUFTQyxNQUFNRSxjQUFjO1lBQzdCQyxhQUFhSCxNQUFNRyxlQUFlO1lBQ2xDQyxhQUFhSixNQUFNSyxNQUFNRCxlQUFlO1lBQ3hDRSxPQUFPTixNQUFNSyxNQUFNRSxRQUFRO1lBQzNCQyxRQUFRUixNQUFNSyxNQUFNSSxTQUFTQyxJQUFJLENBQUNDLElBQVdBLEVBQUVKLElBQUksRUFBRUssS0FBSyxTQUFTO1lBQ25FQyxPQUFPYixNQUFNSyxNQUFNUSxPQUFPTixRQUFRO1lBQ2xDTyxTQUFTZCxNQUFNSyxNQUFNUSxPQUFPRSxRQUFRLENBQUMsRUFBRSxFQUFFQyxPQUFPO1lBQ2hEQSxLQUFLaEIsTUFBTUssTUFBTVksZUFBZUMsV0FBVztRQUM3QztRQUVBLE9BQU8sSUFBSXRCLFNBQVNDLEtBQUtDLFNBQVMsQ0FBQ0csVUFBVTtZQUMzQ2pCLFNBQVM7Z0JBQ1AsZ0JBQWdCO2dCQUNoQixrQkFBa0I7Z0JBQ2xCLGlCQUFpQjtZQUNuQjtRQUNGO0lBQ0YsRUFBRSxPQUFPbUMsR0FBRztRQUNWLE9BQU8sSUFBSXZCLFNBQVNDLEtBQUtDLFNBQVMsQ0FBQztZQUFFQyxTQUFTO1FBQU0sSUFBSTtZQUN0RGYsU0FBUztnQkFBRSxnQkFBZ0I7WUFBbUI7WUFDOUNXLFFBQVE7UUFDVjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2FwaS9ub3ctcGxheWluZy9yb3V0ZS50cz9jMjlkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBydW50aW1lID0gJ2VkZ2UnOyBcbmV4cG9ydCBjb25zdCBkeW5hbWljID0gJ2ZvcmNlLWR5bmFtaWMnOyAgLy8gYWx3YXlzIGZldGNoIGZyZXNoXG5leHBvcnQgY29uc3QgcmV2YWxpZGF0ZSA9IDA7XG5cbi8vIENIRUNLIEhFUkUgRk9SIENMT1VERkFSRSBFUlJPUlNcbmNvbnN0IGNsaWVudElkID0gcHJvY2Vzcy5lbnYuU1BPVElGWV9DTElFTlRfSUQhO1xuY29uc3QgY2xpZW50U2VjcmV0ID0gcHJvY2Vzcy5lbnYuU1BPVElGWV9DTElFTlRfU0VDUkVUITtcbmNvbnN0IHJlZnJlc2hUb2tlbiA9IHByb2Nlc3MuZW52LlNQT1RJRllfUkVGUkVTSF9UT0tFTiE7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFjY2Vzc1Rva2VuKCkge1xuICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHtcbiAgICBncmFudF90eXBlOiAncmVmcmVzaF90b2tlbicsXG4gICAgcmVmcmVzaF90b2tlbjogcmVmcmVzaFRva2VuLFxuICB9KTtcblxuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hY2NvdW50cy5zcG90aWZ5LmNvbS9hcGkvdG9rZW4nLCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmFzaWMgJyArIGJ0b2EoYCR7Y2xpZW50SWR9OiR7Y2xpZW50U2VjcmV0fWApLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgIH0sXG4gICAgYm9keTogcGFyYW1zLnRvU3RyaW5nKCksXG4gIH0pO1xuXG4gIGlmICghcmVzLm9rKSB0aHJvdyBuZXcgRXJyb3IoJ3Rva2VuIHJlZnJlc2ggZmFpbGVkJyk7XG4gIHJldHVybiByZXMuanNvbigpIGFzIFByb21pc2U8eyBhY2Nlc3NfdG9rZW46IHN0cmluZyB9Pjtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVCgpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGFjY2Vzc190b2tlbiB9ID0gYXdhaXQgZ2V0QWNjZXNzVG9rZW4oKTtcblxuICAgIGNvbnN0IHBsYXlpbmdSZXMgPSBhd2FpdCBmZXRjaChcbiAgICAgICdodHRwczovL2FwaS5zcG90aWZ5LmNvbS92MS9tZS9wbGF5ZXIvY3VycmVudGx5LXBsYXlpbmcnLFxuICAgICAgeyBoZWFkZXJzOiB7IEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHthY2Nlc3NfdG9rZW59YCB9IH1cbiAgICApO1xuXG4gICAgaWYgKHBsYXlpbmdSZXMuc3RhdHVzID09PSAyMDQgfHwgcGxheWluZ1Jlcy5zdGF0dXMgPT09IDIwMikge1xuICAgICAgLy8gbm90aGluZyBpcyBwbGF5aW5nXG4gICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHsgcGxheWluZzogZmFsc2UgfSksIHtcbiAgICAgICAgaGVhZGVyczogeyAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXBsYXlpbmdSZXMub2spIHRocm93IG5ldyBFcnJvcignc3BvdGlmeSBub3cgcGxheWluZyBmYWlsZWQnKTtcblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwbGF5aW5nUmVzLmpzb24oKTtcblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICBwbGF5aW5nOiBkYXRhPy5pc19wbGF5aW5nID8/IGZhbHNlLFxuICAgICAgcHJvZ3Jlc3NfbXM6IGRhdGE/LnByb2dyZXNzX21zID8/IDAsXG4gICAgICBkdXJhdGlvbl9tczogZGF0YT8uaXRlbT8uZHVyYXRpb25fbXMgPz8gMCxcbiAgICAgIHRpdGxlOiBkYXRhPy5pdGVtPy5uYW1lID8/ICcnLFxuICAgICAgYXJ0aXN0OiBkYXRhPy5pdGVtPy5hcnRpc3RzPy5tYXAoKGE6IGFueSkgPT4gYS5uYW1lKS5qb2luKCcsICcpID8/ICcnLFxuICAgICAgYWxidW06IGRhdGE/Lml0ZW0/LmFsYnVtPy5uYW1lID8/ICcnLFxuICAgICAgYXJ0d29yazogZGF0YT8uaXRlbT8uYWxidW0/LmltYWdlcz8uWzFdPy51cmwgPz8gJycsXG4gICAgICB1cmw6IGRhdGE/Lml0ZW0/LmV4dGVybmFsX3VybHM/LnNwb3RpZnkgPz8gJycsXG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkocGF5bG9hZCksIHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgLy8gcHJldmVudCBjYWNoaW5nXG4gICAgICAgICdjYWNoZS1jb250cm9sJzogJ25vLXN0b3JlLCBuby1jYWNoZSwgbXVzdC1yZXZhbGlkYXRlJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHsgcGxheWluZzogZmFsc2UgfSksIHtcbiAgICAgIGhlYWRlcnM6IHsgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgc3RhdHVzOiAyMDAsXG4gICAgfSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJydW50aW1lIiwiZHluYW1pYyIsInJldmFsaWRhdGUiLCJjbGllbnRJZCIsInByb2Nlc3MiLCJlbnYiLCJTUE9USUZZX0NMSUVOVF9JRCIsImNsaWVudFNlY3JldCIsIlNQT1RJRllfQ0xJRU5UX1NFQ1JFVCIsInJlZnJlc2hUb2tlbiIsIlNQT1RJRllfUkVGUkVTSF9UT0tFTiIsImdldEFjY2Vzc1Rva2VuIiwicGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiZ3JhbnRfdHlwZSIsInJlZnJlc2hfdG9rZW4iLCJyZXMiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJidG9hIiwiYm9keSIsInRvU3RyaW5nIiwib2siLCJFcnJvciIsImpzb24iLCJHRVQiLCJhY2Nlc3NfdG9rZW4iLCJwbGF5aW5nUmVzIiwiQXV0aG9yaXphdGlvbiIsInN0YXR1cyIsIlJlc3BvbnNlIiwiSlNPTiIsInN0cmluZ2lmeSIsInBsYXlpbmciLCJkYXRhIiwicGF5bG9hZCIsImlzX3BsYXlpbmciLCJwcm9ncmVzc19tcyIsImR1cmF0aW9uX21zIiwiaXRlbSIsInRpdGxlIiwibmFtZSIsImFydGlzdCIsImFydGlzdHMiLCJtYXAiLCJhIiwiam9pbiIsImFsYnVtIiwiYXJ0d29yayIsImltYWdlcyIsInVybCIsImV4dGVybmFsX3VybHMiLCJzcG90aWZ5IiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/now-playing/route.ts\n");

/***/ })

});